<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ohgiraffers.climbon.community.dao.PostDAO">

    <resultMap id="postResultMap" type="com.ohgiraffers.climbon.community.dto.PostDTO">
        <id property="id" column="id"/>
<!--        <result property="userId" column="user_id"/>-->
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="createdAt" column="created_at"/> <!-- 명시적인 매핑 설정 -->
        <result property="category" column="category"/>
        <result property="viewCount" column="view_count"/>
        <result property="imageUrl" column="image_url"/>
        <result property="isAnonymous" column="is_anonymous"/>
        <result property="likes" column="likes"/>
        <result property="status" column="status"/>
    </resultMap>

    <!-- 카테고리 필터 & 페이징 처리 & 검색 게시글 목록 조회 -->
    <select id="getPostsByPageAndCategoryAndSearch" resultMap="postResultMap">
        SELECT * from community_posts
        <where>
            <if test="category != null and category !=''">
                category = #{category}    <!--category를 파라미터로 받는다-->
            </if>
            <if test="searchKeyword != null and searchKeyword != ''"><!--searchKeyword를 파라미터로 받아 title 또는 content에 searchKeyword가 포함된 게시글 검색-->
                    <if test="searchKeyword != null and searchKeyword != ''">
                AND
                    </if>
                (title LIKE CONCAT('%', #{searchKeyword}, '%')       <!--LIKE CONCAT을 사용하여 제목과 내용에 검색어가 포함된 항복을 찾는다-->
                    OR content LIKE CONCAT('%', #{searchKeyword}, '%'))
            </if>
        </where>
        ORDER BY created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 특정 게시글 조회 (id로 조회) -->
    <select id="getPostById" parameterType="int" resultType="com.ohgiraffers.climbon.community.dto.PostDTO">
        SELECT * FROM community_posts WHERE id = #{id}
    </select>

    <!-- 카테고리 필터링 & 전체 게시글 수 조회 -->
    <select id="getTotalPostCount" resultType="int">
        SELECT COUNT(*) FROM community_posts
        <where>
            <if test="category != null">
                category = #{category}
            </if>
        </where>
    </select>

    <!-- 게시글 삽입 user_id 포함-->
<!--    <insert id="insertPost" parameterType="com.ohgiraffers.climbon.community.dto.PostDTO">-->
<!--        INSERT INTO posts (user_id, title, content, view_count, is_anonymous, likes, image_url, category, status, created_at, updated_at)-->
<!--        VALUES (#{userId}, #{title}, #{content}, #{viewCount}, #{isAnonymous}, #{likes}, #{imageUrl}, #{category}, #{status}, NOW(), NOW())-->
<!--    </insert>-->

    <insert id="insertPost" parameterType="com.ohgiraffers.climbon.community.dto.PostDTO">
        INSERT INTO community_posts (title, content, view_count, is_anonymous, likes, image_url, category, status, created_at, updated_at)
        VALUES (#{title}, #{content}, #{viewCount}, #{isAnonymous}, #{likes}, #{imageUrl}, #{category}, #{status}, NOW(), NOW())
    </insert>

    <!-- 게시글 수정 -->
    <update id="updatePost" parameterType="com.ohgiraffers.climbon.community.dto.PostDTO">
        UPDATE community_posts
        SET title = #{title}, content = #{content}, view_count = #{viewCount}, is_anonymous = #{isAnonymous},
        likes = #{likes}, image_url = #{imageUrl}, category = #{category}, status = #{status},
        updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 게시글 삭제 -->
    <delete id="deletePost" parameterType="int">
        DELETE FROM community_posts WHERE id = #{id}
    </delete>

    <!-- 조회수 증가 -->
    <update id="incrementViewCount" parameterType="int">
        UPDATE community_posts
        SET view_count = view_count + 1
        WHERE id = #{id}
    </update>

</mapper>